# Full Monitoring Stack Configuration
# Includes Prometheus and Grafana with comprehensive monitoring

# BunkerWeb with monitoring features
bunkerweb:
  kind: DaemonSet
  resources:
    requests:
      cpu: "1000m"
      memory: "2048Mi"
    limits:
      cpu: "2000m"
      memory: "4096Mi"

scheduler:
  # Enable Prometheus exporter (PRO feature)
  usePrometheusExporter: true
  resources:
    requests:
      cpu: "250m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"

# Database with monitoring
mariadb:
  enabled: true
  persistence:
    size: 10Gi
    storageClass: "ssd"
  resources:
    requests:
      cpu: "250m"
      memory: "512Mi"
    limits:
      cpu: "500m"
      memory: "1024Mi"

# Redis with monitoring
redis:
  enabled: true
  persistence:
    size: 2Gi
    storageClass: "ssd"
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "200m"
      memory: "512Mi"

# Prometheus Configuration
prometheus:
  enabled: true
  replicas: 1
  
  # Persistent storage for metrics
  persistence:
    enabled: true
    size: 100Gi
    storageClass: "ssd"
    accessModes:
      - ReadWriteOnce
  
  # Resource allocation
  resources:
    requests:
      cpu: "500m"
      memory: "2048Mi"
    limits:
      cpu: "1000m"
      memory: "4096Mi"
  
  # Additional pod configuration
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"

# Grafana Configuration
grafana:
  enabled: true
  replicas: 1
  
  # Admin configuration
  adminUser: admin
  adminPassword: "secure-grafana-password"
  
  # Service configuration
  service:
    type: ClusterIP
    port: 3000
  
  # External access via Ingress
  ingress:
    enabled: true
    className: "bunkerweb"
    annotations:
      bunkerweb.io/USE_UI: "yes"
      bunkerweb.io/SERVE_FILES: "no"
      bunkerweb.io/INTERCEPTED_ERROR_CODES: '400 404 405 413 429 500 501 502 503 504'
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: grafana.yourdomain.com
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - secretName: grafana-tls
        hosts:
          - grafana.yourdomain.com
  
  # Persistent storage for dashboards
  persistence:
    enabled: true
    size: 10Gi
    storageClass: "ssd"
    accessModes:
      - ReadWriteOnce
  
  # Resource allocation
  resources:
    requests:
      cpu: "200m"
      memory: "512Mi"
    limits:
      cpu: "500m"
      memory: "1024Mi"
  
  # Pre-configured Prometheus datasource
  prometheusDatasource:
    name: Prometheus-BW
    type: prometheus
    url: 'http://prometheus-bunkerweb.default.svc.cluster.local:9090'
    access: proxy
    isDefault: true
  
  # Security context
  securityContext:
    fsGroup: 472
    runAsUser: 472
    runAsGroup: 472
  
  # Additional environment variables for monitoring
  extraEnvs:
    - name: GF_INSTALL_PLUGINS
      value: "grafana-piechart-panel,grafana-worldmap-panel"
    - name: GF_METRICS_ENABLED
      value: "true"
    - name: GF_ALERTING_ENABLED
      value: "true"
  
  # Dashboard sidecar configuration (if using external dashboard management)
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
      labelValue: "1"
      folder: /tmp/dashboards

# UI with enhanced logging
ui:
  enabled: true
  
  # Enable comprehensive logging
  logs:
    enabled: true
    persistence:
      size: 20Gi
      storageClass: "ssd"
  
  # Ingress for UI access
  ingress:
    enabled: true
    serverName: "bunkerweb-ui.yourdomain.com"
    tlsSecretName: "bunkerweb-ui-tls"
    extraAnnotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"

# Enhanced settings for monitoring
settings:
  kubernetes:
    ingressClass: "bunkerweb"
  
  misc:
    # Enable detailed logging
    dnsResolvers: "1.1.1.1 8.8.8.8"
  
  ui:
    wizard: false  # Disable wizard for production

# Service configuration
service:
  type: LoadBalancer
  annotations:
    # Enable monitoring annotations
    prometheus.io/scrape: "true"
    prometheus.io/port: "80"
    prometheus.io/path: "/metrics"

# Network policy for monitoring
networkPolicy:
  enabled: true
  egress:
    allowSameNamespace: true
    allowInternet: true
    internetPorts: [80, 443, 53, 9090, 3000]  # Include monitoring ports
