# =============================================================================
# BunkerWeb Helm Chart Values
# =============================================================================
# This file contains all configurable values for the BunkerWeb Helm chart.
# For more information about BunkerWeb configuration, visit:
# https://docs.bunkerweb.io/

# =============================================================================
# GLOBAL CONFIGURATION
# =============================================================================
# These settings apply to all components unless overridden

# Global image pull secrets for private registries
# Example: imagePullSecrets: [{"name": "myregistry-secret"}]
imagePullSecrets: []

# Override the chart name (default: chart name)
nameOverride: ""

# Override the namespace (default: release namespace)
namespaceOverride: ""

# Override the full resource name (default: release-chart)
fullnameOverride: ""

# Node selector for all pods (can be overridden per component)
# Example: nodeSelector: {"kubernetes.io/arch": "amd64"}
nodeSelector: {}

# Tolerations for all pods (can be overridden per component)
# Example: tolerations: [{"key": "node-role", "operator": "Equal", "value": "master", "effect": "NoSchedule"}]
tolerations: []

# Topology spread constraints for better pod distribution
# Example: topologySpreadConstraints: [{"maxSkew": 1, "topologyKey": "kubernetes.io/hostname", "whenUnsatisfiable": "DoNotSchedule"}]
topologySpreadConstraints: []

# =============================================================================
# BUNKERWEB CORE SETTINGS
# =============================================================================
# Configuration for BunkerWeb behavior in Kubernetes environment

settings:
  # ----- SECRET MANAGEMENT -----
  # Specify the name of an existing secret containing sensitive parameters.
  # When using this, the following keys should be present:
  #   - database-uri      : Database connection string
  #   - redis-username    : Redis username (if authentication enabled)
  #   - redis-password    : Redis password
  #   - admin-username    : UI admin username
  #   - admin-password    : UI admin password
  #   - flask-secret      : Flask session secret
  #   - totp-secrets      : TOTP secrets for 2FA
  #   - mariadb-user      : MariaDB username
  #   - mariadb-password  : MariaDB password
  existingSecret: ""

  # ----- KUBERNETES INTEGRATION -----
  kubernetes:
    # Comma-separated list of namespaces to monitor for Ingress resources
    # Empty string means all namespaces (requires cluster-wide permissions)
    # Example: "default,production,staging"
    namespaces: ""

    # Ingress class name that BunkerWeb will handle
    # Must match the IngressClass resource name
    ingressClass: ""

    # Kubernetes cluster domain name for service discovery
    domainName: "cluster.local"

  # ----- GENERAL CONFIGURATION -----
  misc:
    # Database connection URI (auto-generated if using internal MariaDB)
    # Format: mysql+pymysql://user:password@host:port/database
    databaseUri: ""

    # DNS resolvers for BunkerWeb (space-separated)
    # Default uses CoreDNS service in kube-system namespace
    dnsResolvers: "coredns.kube-system.svc.cluster.local"

    # IP ranges allowed to access BunkerWeb API (space-separated CIDR blocks)
    # Includes common Kubernetes and private network ranges
    apiWhitelistIp: "127.0.0.0/8 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"

  # ----- REDIS CONFIGURATION -----
  redis:
    # Enable Redis for caching and persistence
    # Recommended for production environments
    useRedis: "yes"

    # Redis hostname (auto-configured if using internal Redis)
    redisHost: ""

    # Redis authentication (leave empty if not using auth)
    redisUsername: ""
    redisPassword: ""

  # ----- WEB UI CONFIGURATION -----
  ui:
    # Enable the setup wizard on first launch
    wizard: true

    # Ingress configuration for UI access
    ingress:
      # Set to true to create an Ingress resource for the UI
      enabled: false

      # IngressClass name to use
      ingressClassName: ""

      # Domain name for UI access
      # Example: "bunkerweb-ui.example.com"
      serverName: ""

      # Path for UI access (usually "/")
      serverPath: "/"

      # Additional annotations for the Ingress resource
      # Example: {"cert-manager.io/cluster-issuer": "letsencrypt-prod"}
      extraAnnotations: {}

      # Secret name containing TLS certificate
      # Leave empty to disable HTTPS
      tlsSecretName: ""

    # UI authentication settings
    adminUsername: ""
    adminPassword: ""

    # Override admin credentials on startup
    # Set to "yes" to reset admin credentials to the values above
    overrideAdminCreds: "no"

    # Flask session secret (auto-generated if empty)
    flaskSecret: ""

    # TOTP secrets for two-factor authentication
    totpSecrets: ""

# =============================================================================
# SERVICE CONFIGURATION
# =============================================================================
# External service for BunkerWeb (LoadBalancer/NodePort)

service:
  # Enable external service creation
  enabled: true

  # Service type: LoadBalancer, NodePort, or ClusterIP
  # LoadBalancer: Exposes service externally using cloud provider's load balancer
  # NodePort: Exposes service on each node's IP at a static port
  # ClusterIP: Only accessible within the cluster
  type: LoadBalancer

  # External traffic policy: Local or Cluster
  # Local: Preserves client IP but may cause uneven distribution
  # Cluster: Better distribution but loses client IP
  externalTrafficPolicy: Local

  # Additional service annotations
  # Example: {"service.beta.kubernetes.io/aws-load-balancer-type": "nlb"}
  annotations: {}

# =============================================================================
# BUNKERWEB COMPONENT
# =============================================================================
# Main reverse proxy and WAF component

bunkerweb:
  # Deployment type: "DaemonSet" or "Deployment" or "StatefulSet"
  # DaemonSet: Runs one pod per node (recommended for ingress)
  # Deployment: Runs specified number of replicas
  # StatefulSet: For stable network IDs and storage (not typical for ingress)
  kind: Deployment

  # Pod annotations for Kubernetes integration (required)
  # This enables BunkerWeb to be managed by the controller
  enableInstance: true

  # Use host ports for direct traffic (only for DaemonSet)
  # Allows binding to ports 80/443 on each node
  hostPorts: true

  # Number of replicas (for Deployment & StatefulSet kind)
  # Minimum 2 for high availability and PodDisruptionBudget
  replicas: 1

  # Container image configuration
  repository: bunkerity/bunkerweb
  tag: 1.6.4
  pullPolicy: Always

  # Image pull secrets (overrides global setting)
  imagePullSecrets: []

  # Node selector (overrides global setting)
  nodeSelector: {}

  # Tolerations (overrides global setting)
  tolerations: []

  # Pod affinity rules
  affinity: {}

  # Anti-affinity preset: "soft" or "hard"
  # soft: Prefers not to schedule pods on same node
  # hard: Never schedules pods on same node
  podAntiAffinityPreset: "soft"

  # Resource requests and limits
  # RECOMMENDED: Uncomment and adjust for production
  # resources:
  #   requests:
  #     cpu: "2000m"
  #     memory: "4096Mi"
  #   limits:
  #     cpu: "4000m"
  #     memory: "8192Mi"

  # Additional pod annotations
  podAnnotations: {}

  # Additional pod labels
  podLabels: {}

  # Security context for BunkerWeb container
  securityContext:
    runAsUser: 101
    runAsGroup: 101
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

  # Additional environment variables
  # Example: extraEnvs: [{"name": "DEBUG", "value": "true"}]
  extraEnvs: []

  # Liveness probe configuration
  livenessProbe:
    exec:
      command:
        - /usr/share/bunkerweb/helpers/healthcheck.sh
    initialDelaySeconds: 30
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 3

  # Readiness probe configuration
  readinessProbe:
    exec:
      command:
        - /usr/share/bunkerweb/helpers/healthcheck.sh
    initialDelaySeconds: 30
    periodSeconds: 1
    timeoutSeconds: 1
    failureThreshold: 3

  # Custom volumes configuration
  # Allows mounting additional volumes to the BunkerWeb container
  volumes: []
  # Example:
  # volumes:
  #   - name: shared-data
  #     persistentVolumeClaim:
  #       claimName: shared-pvc

  # Custom volume mounts configuration
  # Defines where to mount the custom volumes in the container
  volumeMounts: []
  # Example:
  # volumeMounts:
  #   - name: shared-data
  #     mountPath: /var/lib/bunkerweb/shared

  ## PodDisruptionBudget for default backend
  ## bunkerweb Pod Disruption Budget configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  ##
  pdb:
    # Enable creation of Pod Disruption Budget
    # Make sure you have at least 2 replicas if enabled
    create: true

    # Minimum number/percentage of pods that must remain available
    # Example: minAvailable: 1 or minAvailable: "50%"
    minAvailable: ""

    # Maximum number/percentage of pods that can be unavailable
    # Example: maxUnavailable: 1 or maxUnavailable: "25%"
    maxUnavailable: ""

# =============================================================================
# SCHEDULER COMPONENT
# =============================================================================
# Manages BunkerWeb configuration and coordination

scheduler:
  # Container image configuration
  repository: bunkerity/bunkerweb-scheduler
  tag: 1.6.4
  pullPolicy: Always

  # Image pull secrets (overrides global setting)
  imagePullSecrets: []

  # Node selector (overrides global setting)
  nodeSelector: {}

  # Tolerations (overrides global setting)
  tolerations: []

  # Resource requests and limits
  # RECOMMENDED: Uncomment and adjust for production
  # resources:
  #   requests:
  #     cpu: "250m"
  #     memory: "256Mi"
  #   limits:
  #     cpu: "500m"
  #     memory: "512Mi"

  # Additional pod annotations
  podAnnotations: {}

  # Additional pod labels
  podLabels: {}

  # Security context for scheduler container
  securityContext:
    runAsUser: 101
    runAsGroup: 101
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

  
  # BunkerWeb feature configuration
  # These settings control the behavior of BunkerWeb security features
  # These features will be applied by default on any new services, but could be overwritten on a per service basis
  features:
    # =============================================================================
    # GLOBAL SETTINGS
    # =============================================================================
    global:
      # Security mode: "detect" for monitoring only, "block" for active protection
      securityMode: "block"
      # Default server protection
      disableDefaultServer: "no"
      disableDefaultServerStrictSni: "no"
      
    # =============================================================================
    # MODSECURITY WAF
    # =============================================================================
    modsecurity:
      # Enable ModSecurity Web Application Firewall
      useModsecurity: "yes"
      # Enable OWASP Core Rule Set
      useModsecurityCrs: "yes"
      # CRS version: "3", "4", or "nightly"
      modsecurityCrsVersion: "4"
      # Rule engine: "On", "DetectionOnly", or "Off"
      modsecuritySecRuleEngine: "On"
      # Enable CRS plugins for enhanced protection
      useModsecurityCrsPlugins: "yes"
      # List of CRS plugins to install (space-separated)
      modsecurityCrsPlugins: ""
      
    # =============================================================================
    # ANTIBOT PROTECTION
    # =============================================================================
    antibot:
      # Antibot challenge type: "no", "cookie", "javascript", "captcha", "recaptcha", "hcaptcha", "turnstile", "mcaptcha"
      useAntibot: "no"
      # Challenge URI (must be unique and not used by your application)
      antibotUri: "/challenge"
      # Time limit to complete challenge (seconds)
      antibotTimeResolve: "60"
      # Challenge validity duration (seconds)
      antibotTimeValid: "86400"
      # IPs to bypass antibot challenges (space-separated)
      antibotIgnoreIp: ""
      # URIs to bypass antibot challenges (regex patterns, space-separated)
      antibotIgnoreUri: ""
      
    # =============================================================================
    # RATE LIMITING
    # =============================================================================
    rateLimit:
      # Enable request rate limiting
      useLimitReq: "no"
      # Rate limit (e.g., "2r/s", "60r/m")
      limitReqRate: "2r/s"
      # URL pattern to apply rate limiting
      limitReqUrl: "/"
      # Enable connection limiting
      useLimitConn: "no"
      # Max HTTP/1.1 connections per IP
      limitConnMaxHttp1: "10"
      # Max HTTP/2 connections per IP
      limitConnMaxHttp2: "100"
      # Max HTTP/3 connections per IP
      limitConnMaxHttp3: "100"
      
    # =============================================================================
    # BLACKLIST/WHITELIST
    # =============================================================================
    blacklist:
      # Enable blacklist functionality
      useBlacklist: "yes"
      # Community blacklists to use
      blacklistCommunityLists: "ip:danmeuk-tor-exit ua:mitchellkrogza-bad-user-agents ip:laurent-minne-data-shield-aggressive"
      # Manual IP blacklist (space-separated)
      blacklistIp: ""
      # Blacklist URLs for automatic updates
      blacklistIpUrls: ""
      
    whitelist:
      # Enable whitelist functionality
      useWhitelist: "no"
      # Manual IP whitelist (space-separated CIDR)
      whitelistIp: ""
      # Whitelist URLs for automatic updates
      whitelistIpUrls: ""
      
    # =============================================================================
    # COUNTRY BLOCKING
    # =============================================================================
    geoBlocking:
      # Allowed countries (ISO 3166-1 alpha-2 codes, space-separated)
      whitelistCountry: ""
      # Blocked countries (ISO 3166-1 alpha-2 codes, space-separated)
      blacklistCountry: ""
      
    # =============================================================================
    # BAD BEHAVIOR DETECTION
    # =============================================================================
    badBehavior:
      # Enable bad behavior detection
      useBadBehavior: "yes"
      # HTTP status codes considered "bad" (space-separated)
      badBehaviorStatusCodes: "400 401 403 404 405 429 444"
      # Threshold before banning IP
      badBehaviorThreshold: "10"
      # Time window for counting bad requests (seconds)
      badBehaviorCountTime: "60"
      # Ban duration (seconds, 0 = permanent)
      badBehaviorBanTime: "86400"
      
    # =============================================================================
    # SSL/TLS CONFIGURATION
    # =============================================================================
    ssl:
      # Enable HTTPS listening
      listenHttps: "yes"
      # SSL protocols to support
      sslProtocols: "TLSv1.2 TLSv1.3"
      # Cipher security level: "old", "intermediate", "modern"
      sslCiphersLevel: "modern"
      # Auto-redirect HTTP to HTTPS
      autoRedirectHttpToHttps: "yes"
      
    # Let's Encrypt configuration
    letsEncrypt:
      # Enable automatic Let's Encrypt certificates
      autoLetsEncrypt: "no"
      # Email for Let's Encrypt notifications
      emailLetsEncrypt: ""
      # Challenge type: "http" or "dns"
      letsEncryptChallenge: "http"
      # DNS provider for DNS challenges
      letsEncryptDnsProvider: ""
      # Enable wildcard certificates (DNS challenges only)
      useLetsEncryptWildcard: "no"
      
    # Custom SSL certificate
    customSsl:
      # Use custom SSL certificates
      useCustomSsl: "no"
      # Certificate priority: "file" or "data"
      customSslCertPriority: "file"
      # Certificate file path
      customSslCert: ""
      # Private key file path
      customSslKey: ""
      
    # =============================================================================
    # COMPRESSION
    # =============================================================================
    compression:
      # Enable GZIP compression
      useGzip: "no"
      # GZIP compression level (1-9)
      gzipCompLevel: "5"
      # Minimum response size for compression (bytes)
      gzipMinLength: "1000"
      # Enable Brotli compression
      useBrotli: "no"
      # Brotli compression level (0-11)
      brotliCompLevel: "6"
      
    # =============================================================================
    # CLIENT CACHING
    # =============================================================================
    clientCache:
      # Enable client-side caching
      useClientCache: "no"
      # File extensions to cache (pipe-separated)
      clientCacheExtensions: "jpg|jpeg|png|gif|css|js|svg|woff|woff2"
      # Cache-Control header value
      clientCacheControl: "public, max-age=86400"
      # Enable ETags
      clientCacheEtag: "yes"
      
    # =============================================================================
    # REVERSE PROXY
    # =============================================================================
    reverseProxy:
      # Enable reverse proxy functionality
      useReverseProxy: "no"
      # Backend server URLs (multiple values supported with suffix _1, _2, etc.)
      reverseProxyHost: ""
      # URL paths to proxy (multiple values supported with suffix _1, _2, etc.)
      reverseProxyUrl: "/"
      # Connection timeout
      reverseProxyConnectTimeout: "10s"
      # Send timeout
      reverseProxySendTimeout: "60s"
      # Read timeout
      reverseProxyReadTimeout: "60s"
      
    # =============================================================================
    # REAL IP DETECTION
    # =============================================================================
    realIp:
      # Enable real IP detection (behind proxy/load balancer)
      useRealIp: "no"
      # Trusted proxy IPs (space-separated CIDR)
      realIpFrom: ""
      # Header containing real IP
      realIpHeader: "X-Forwarded-For"
      # Enable recursive IP detection
      realIpRecursive: "yes"
      # Enable PROXY protocol support
      useProxyProtocol: "no"
      
    # =============================================================================
    # SECURITY HEADERS
    # =============================================================================
    headers:
      # HSTS header
      strictTransportSecurity: "max-age=63072000; includeSubDomains; preload"
      # Content Security Policy
      contentSecurityPolicy: "object-src 'none'; form-action 'self'; frame-ancestors 'self';"
      # CSP report-only mode
      contentSecurityPolicyReportOnly: "no"
      # X-Frame-Options header
      xFrameOptions: "SAMEORIGIN"
      # X-Content-Type-Options header
      xContentTypeOptions: "nosniff"
      # Referrer Policy
      referrerPolicy: "strict-origin-when-cross-origin"
      # Headers to remove (space-separated)
      removeHeaders: "Server X-Powered-By"
      # Custom headers (multiple values supported with suffix _1, _2, etc.)
      customHeader: ""
      
    # =============================================================================
    # CORS CONFIGURATION
    # =============================================================================
    cors:
      # Enable CORS
      useCors: "no"
      # Allowed origins (regex pattern or "self" or "*")
      corsAllowOrigin: "self"
      # Allowed HTTP methods
      corsAllowMethods: "GET, POST, OPTIONS"
      # Allowed headers
      corsAllowHeaders: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range"
      # Allow credentials
      corsAllowCredentials: "no"
      
    # =============================================================================
    # DNSBL CHECKING
    # =============================================================================
    dnsbl:
      # Enable DNSBL checking
      useDnsbl: "no"
      # DNSBL servers to query (space-separated)
      dnsblList: "bl.blocklist.de sbl.spamhaus.org xbl.spamhaus.org"
      
    # =============================================================================
    # BUNKERNET THREAT INTELLIGENCE
    # =============================================================================
    bunkerNet:
      # Enable BunkerNet threat intelligence
      useBunkernet: "yes"
      # BunkerNet API server
      bunkernetServer: "https://api.bunkerweb.io"
      
    # =============================================================================
    # SESSION MANAGEMENT
    # =============================================================================
    sessions:
      # Session secret key (leave empty to auto-generate)
      sessionsSecret: ""
      # Session cookie name
      sessionsName: "bwcookie"
      # Idle timeout (seconds)
      sessionsIdlingTimeout: "1800"
      # Rolling timeout (seconds)
      sessionsRollingTimeout: "3600"
      # Absolute timeout (seconds)
      sessionsAbsoluteTimeout: "86400"
      # Check IP address consistency
      sessionsCheckIp: "yes"
      # Check User-Agent consistency
      sessionsCheckUserAgent: "yes"
      
    # =============================================================================
    # METRICS AND MONITORING
    # =============================================================================
    metrics:
      # Enable metrics collection
      useMetrics: "yes"
      # Memory size for metrics storage
      metricsMemorySize: "16m"
      # Max blocked requests per worker
      metricsMaxBlockedRequests: "1000"
      # Save metrics to Redis
      metricsSaveToRedis: "yes"
      
    # =============================================================================
    # AUTH BASIC
    # =============================================================================
    authBasic:
      # Enable HTTP Basic Authentication
      useAuthBasic: "no"
      # Protection scope: "sitewide" or specific path
      authBasicLocation: "sitewide"
      # Username (multiple values supported with suffix _1, _2, etc.)
      authBasicUser: ""
      # Password (multiple values supported with suffix _1, _2, etc.)
      authBasicPassword: ""
      # Authentication prompt text
      authBasicText: "Restricted area"
      
    # =============================================================================
    # REDIRECTS
    # =============================================================================
    redirect:
      # Path to redirect from
      redirectFrom: ""
      # Destination URL
      redirectTo: ""
      # Preserve request URI
      redirectToRequestUri: "yes"
      # HTTP status code for redirect
      redirectToStatusCode: "301"
      
    # =============================================================================
    # ERROR PAGES
    # =============================================================================
    errors:
      # Custom error page mappings (ERROR_CODE=/path/to/file.html)
      errors: ""
      # HTTP error codes to intercept
      interceptedErrorCodes: "400 401 403 404 405 413 429 500 501 502 503 504"
      
    # =============================================================================
    # HTML INJECTION
    # =============================================================================
    htmlInjection:
      # HTML to inject in <head> section
      injectHead: ""
      # HTML to inject before </body>
      injectBody: ""
      
    # =============================================================================
    # ROBOTS.TXT
    # =============================================================================
    robotsTxt:
      # Enable robots.txt generation
      useRobotsTxt: "no"
      # DarkVisitors API token
      robotsTxtDarkvisitorsToken: ""
      # Community lists to include
      robotsTxtCommunityLists: ""
      # Manual robots.txt rules (multiple values supported)
      robotsTxtRule: ""
      # Sitemap URLs (multiple values supported)
      robotsTxtSitemap: ""
      
    # =============================================================================
    # SECURITY.TXT
    # =============================================================================
    securityTxt:
      # Enable security.txt file
      useSecurityTxt: "no"
      # Contact information (multiple values supported)
      securityTxtContact: ""
      # Expiration date (ISO 8601 format)
      securityTxtExpires: ""
      # Security policy URL
      securityTxtPolicy: ""
      
    # =============================================================================
    # CROWDSEC INTEGRATION
    # =============================================================================
    crowdSec:
      # Enable CrowdSec integration
      useCrowdSec: "no"
      # CrowdSec Local API URL
      crowdSecApi: "http://crowdsec:8080"
      # CrowdSec API key
      crowdSecApiKey: ""
      # Operation mode: "live" or "stream"
      crowdSecMode: "live"
      # AppSec component URL (optional)
      crowdSecAppsecUrl: ""
      
    # =============================================================================
    # PHP INTEGRATION
    # =============================================================================
    php:
      # Remote PHP-FPM host
      remotePhp: ""
      # Remote PHP-FPM port
      remotePhpPort: "9000"
      # Remote PHP-FPM path
      remotephpPath: ""
      # Local PHP-FPM socket
      localPhp: ""
      # Local PHP-FPM path
      localPhpPath: ""
      
    # =============================================================================
    # GREYLIST (CONDITIONAL ACCESS)
    # =============================================================================
    greylist:
      # Enable greylist functionality
      useGreylist: "no"
      # IP addresses to greylist (space-separated CIDR)
      greylistIp: ""
      # Greylist URLs for automatic updates
      greylistIpUrls: ""
      
    # =============================================================================
    # REVERSE SCAN
    # =============================================================================
    reverseScan:
      # Enable client port scanning
      useReverseScan: "no"
      # Ports to scan on client (space-separated)
      reverseScanPorts: "22 80 443 3128 8000 8080"
      # Scan timeout (milliseconds)
      reverseScanTimeout: "500"
      
    # =============================================================================
    # BACKUP CONFIGURATION
    # =============================================================================
    backup:
      # Enable backup functionality
      useBackup: "yes"
      # Backup frequency: "daily", "weekly", "monthly"
      backupSchedule: "daily"
      # Number of backups to retain
      backupRotation: "7"
      # Backup directory
      backupDirectory: "/var/lib/bunkerweb/backups"

  # Additional environment variables for advanced configuration
  # These will be merged with the feature configuration above
  extraEnvs: []

  # Liveness probe configuration
  livenessProbe:
    exec:
      command:
        - /usr/share/bunkerweb/helpers/healthcheck-scheduler.sh
    initialDelaySeconds: 30
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 3

  # PRO Features configuration
  # BunkerWeb PRO license key for advanced features
  proLicenseKey: ""

  # Enable Prometheus metrics exporter
  # Requires BunkerWeb PRO license
  usePrometheusExporter: false

# =============================================================================
# CONTROLLER COMPONENT
# =============================================================================
# Kubernetes controller for automatic Ingress management

controller:
  # Enable the controller (required for Ingress integration)
  enabled: true

  # Container image configuration
  repository: bunkerity/bunkerweb-autoconf
  tag: 1.6.4
  pullPolicy: Always

  # Image pull secrets (overrides global setting)
  imagePullSecrets: []

  # Node selector (overrides global setting)
  nodeSelector: {}

  # Tolerations (overrides global setting)
  tolerations: []

  # Resource requests and limits
  # RECOMMENDED: Uncomment and adjust for production
  # resources:
  #   requests:
  #     cpu: "100m"
  #     memory: "128Mi"
  #   limits:
  #     cpu: "250m"
  #     memory: "256Mi"

  # Additional pod annotations
  podAnnotations: {}

  # Additional pod labels
  podLabels: {}

  # Security context for controller container
  securityContext:
    runAsUser: 101
    runAsGroup: 101
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

  # Additional environment variables
  extraEnvs: []

  # Liveness probe configuration
  livenessProbe:
    exec:
      command:
        - /usr/share/bunkerweb/helpers/healthcheck-autoconf.sh
    initialDelaySeconds: 30
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 3

  # Readiness probe configuration
  readinessProbe:
    exec:
      command:
        - /usr/share/bunkerweb/helpers/healthcheck-autoconf.sh
    initialDelaySeconds: 30
    periodSeconds: 1
    timeoutSeconds: 1
    failureThreshold: 3

# =============================================================================
# WEB UI COMPONENT
# =============================================================================
# Web interface for BunkerWeb management and monitoring

ui:
  # Enable the web UI
  enabled: true

  # Container image configuration
  repository: bunkerity/bunkerweb-ui
  tag: 1.6.4
  pullPolicy: Always

  # Image pull secrets (overrides global setting)
  imagePullSecrets: []

  # Node selector (overrides global setting)
  nodeSelector: {}

  # Tolerations (overrides global setting)
  tolerations: []

  # Resource requests and limits
  # RECOMMENDED: Uncomment and adjust for production
  # resources:
  #   requests:
  #     cpu: "100m"
  #     memory: "256Mi"
  #   limits:
  #     cpu: "250m"
  #     memory: "512Mi"

  # Additional pod annotations
  podAnnotations: {}

  # Additional pod labels
  podLabels: {}

  # Security context for UI container
  securityContext:
    runAsUser: 101
    runAsGroup: 101
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

  # Additional environment variables
  extraEnvs: []

  # Log collection configuration
  logs:
    # Enable log collection sidecar
    enabled: true

    # Syslog-ng container for log collection
    repository: balabit/syslog-ng
    pullPolicy: Always
    tag: 4.8.0

    # Persistent storage for logs
    persistence:
      size: 5Gi
      # Storage class for log persistence
      # Leave empty for default storage class
      storageClass: ""

  # Liveness probe configuration
  livenessProbe:
    exec:
      command:
        - /usr/share/bunkerweb/helpers/healthcheck-ui.sh
    initialDelaySeconds: 30
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 3

  # Readiness probe configuration
  readinessProbe:
    exec:
      command:
        - /usr/share/bunkerweb/helpers/healthcheck-ui.sh
    initialDelaySeconds: 30
    periodSeconds: 1
    timeoutSeconds: 1
    failureThreshold: 3

# =============================================================================
# DATABASE (MARIADB) COMPONENT
# =============================================================================
# Database backend for BunkerWeb configuration and logs

mariadb:
  # Enable internal MariaDB instance
  # Set to false to use external database
  enabled: true

  # Container image configuration
  repository: mariadb
  tag: "11"
  pullPolicy: Always

  # Image pull secrets (overrides global setting)
  imagePullSecrets: []

  # Node selector (overrides global setting)
  nodeSelector: {}

  # Tolerations (overrides global setting)
  tolerations: []

  # Persistent storage configuration
  persistence:
    # Storage size for database
    size: 5Gi

    # Storage class for database persistence
    # Leave empty for default storage class
    # Example: "fast-ssd", "standard", "gp2"
    storageClass: ""

  # Database configuration
  config:
    # Generate random root password
    randomRootPassword: "1"

    # BunkerWeb database name
    database: "db"

    # BunkerWeb database user
    user: "bunkerweb"

    # BunkerWeb database password
    # SECURITY: Change this in production or use existingSecret
    password: "changeme"

  # Additional arguments for MariaDB
  # Example: args: ["--character-set-server=utf8mb4"]
  args: []

  # Resource requests and limits
  # RECOMMENDED: Uncomment and adjust for production
  # resources:
  #   requests:
  #     cpu: "250m"
  #     memory: "512Mi"
  #   limits:
  #     cpu: "500m"
  #     memory: "1024Mi"

# =============================================================================
# REDIS COMPONENT
# =============================================================================
# Cache and session storage for BunkerWeb

redis:
  # Enable internal Redis instance
  # Set to false to use external Redis
  enabled: true

  # Container image configuration
  repository: redis
  tag: 7-alpine
  pullPolicy: Always
  # Persistent storage configuration
  persistence:
    # Storage size for Redis data
    size: 1Gi

    # Storage class for Redis persistence
    # Leave empty for default storage class
    storageClass: ""

  # Image pull secrets (overrides global setting)
  imagePullSecrets: []

  # Node selector (overrides global setting)
  nodeSelector: {}

  # Tolerations (overrides global setting)
  tolerations: []

  # Use custom Redis configuration file
  useConfigFile: false

  # Redis configuration
  config:
    # Redis authentication password
    # SECURITY: Change this in production or use existingSecret
    password: "changeme"

    # Custom Redis configuration
    # Applied when useConfigFile is true
    file: |
      appendonly yes
      save ""
      loglevel verbose
      maxmemory 512mb
      maxmemory-policy allkeys-lru

  # Resource requests and limits
  # RECOMMENDED: Uncomment and adjust for production
  # resources:
  #   requests:
  #     cpu: "250m"
  #     memory: "512Mi"
  #   limits:
  #     cpu: "500m"
  #     memory: "1024Mi"

# =============================================================================
# INGRESS CLASS
# =============================================================================
# Kubernetes IngressClass resource for BunkerWeb

ingressClass:
  # Create IngressClass resource
  enabled: true

  # IngressClass name (used in Ingress resources)
  name: "bunkerweb"

  # Controller identifier for this IngressClass
  controller: "bunkerweb.io/ingress-controller"

# =============================================================================
# MONITORING - PROMETHEUS
# =============================================================================
# Metrics collection and storage

prometheus:
  # Enable Prometheus for metrics collection
  # Requires BunkerWeb PRO for advanced metrics
  enabled: false

  # Container image configuration
  repository: prom/prometheus
  pullPolicy: Always
  tag: v3.3.1

  # Number of Prometheus replicas
  replicas: 1

  # Additional pod annotations
  podAnnotations: {}

  # Additional pod labels
  podLabels: {}

  # Security context for Prometheus
  securityContext:
    fsGroup: 65534

  # Persistent storage configuration
  persistence:
    # Enable persistent storage
    enabled: true

    # Storage size for metrics data
    size: 8Gi

    # Storage class for metrics persistence
    storageClass: ""

    # Access modes for the persistent volume
    accessModes:
      - ReadWriteOnce

# =============================================================================
# MONITORING - GRAFANA
# =============================================================================
# Dashboards and visualization

grafana:
  # Enable Grafana for dashboards
  enabled: false

  # Container image configuration
  repository: grafana/grafana
  tag: latest
  pullPolicy: IfNotPresent

  # Number of Grafana replicas
  replicas: 1

  # Admin user configuration
  adminUser: admin

  # Admin password (leave empty to generate random)
  # SECURITY: Set a strong password or use existingSecret
  adminPassword: ""

  # Use existing secret for admin password
  # Secret should contain 'admin-password' key
  # existingSecret: "grafana-admin-secret"
  existingSecret: ""

  # Additional environment variables (missing from values.yaml)
  extraEnvs: []

  # Service configuration
  service:
    type: ClusterIP
    port: 3000

  # Ingress configuration for external access
  ingress:
    enabled: false
    # ingressClassName: ""
    # className: ""
    # annotations: {}
    #   # kubernetes.io/ingress.class: nginx
    #   # kubernetes.io/tls-acme: "true"
    # hosts:
    #   - host: chart-example.local
    #     paths:
    #       - path: /
    #         pathType: ImplementationSpecific
    # tls:
    #   - secretName: grafana-tls
    #     hosts:
    #       - grafana.example.com

  # Persistent storage configuration
  persistence:
    enabled: false
    size: 10Gi

    # Storage class for dashboard persistence
    storageClass: ""

    # Access modes for the persistent volume
    accessModes:
      - ReadWriteOnce

    # Additional annotations for the PVC
    # annotations: {}

  # Prometheus data source configuration
  # Automatically configured when Prometheus is enabled
  prometheusDatasource:
    name: Prometheus
    type: prometheus
    url: 'http://prometheus-{{ include "bunkerweb.fullname" . }}.{{ include "bunkerweb.namespace" . }}.svc:9090'
    access: proxy
    isDefault: true

  # Additional pod annotations
  podAnnotations: {}

  # Additional pod labels
  podLabels: {}

  # Security context for Grafana
  securityContext:
    {}
    # fsGroup: 472
    # runAsUser: 472
    # runAsGroup: 472

  # Additional environment variables
  # extraEnvs: []

  # Sidecar configuration for dashboard provisioning
  # sidecar:
  #   dashboards:
  #     enabled: false
  #     label: grafana_dashboard
  #     labelValue: "1"
  #     folder: /tmp/dashboards

# =============================================================================
# NETWORK SECURITY
# =============================================================================
# Network policies for micro-segmentation

networkPolicy:
  # Enable network policies for enhanced security
  # Requires a CNI that supports NetworkPolicies (e.g., Calico, Cilium)
  enabled: false

  # Egress traffic configuration
  egress:
    # Allow traffic to pods in the same namespace
    allowSameNamespace: true

    # Allow internet access for updates and external APIs
    allowInternet: true

    # Ports allowed for internet access
    internetPorts: [80, 443]

    # Allow access to database virtual network
    allowDatabaseVNet: true

    # CIDR range for database network
    databaseVNetCIDR: "10.0.0.0/16"

    # Database port for access
    databasePort: 3306
